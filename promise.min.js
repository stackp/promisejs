/*
 *  Copyright 2012-2013 (c) Pierre Duquesne <stackp@online.fr>
 *  Licensed under the New BSD License.
 *  https://github.com/stackp/promisejs
 */
(function (n) { function t() { this._callbacks = [] } function e(n) { function o(n) { return function () { f += 1; u[n] = Array.prototype.slice.call(arguments); f === e && r.done(u) } } var r = new t, u = [], f, e, i; if (!n || !n.length) return r.done(u), r; for (f = 0, e = n.length, i = 0; i < e; i++) n[i].then(o(i)); return r } function u(n, i) { var r = new t; return n.length === 0 ? r.done.apply(r, i) : n[0].apply(null, i).then(function () { n.splice(0, 1); u(n, arguments).then(function () { r.done.apply(r, arguments) }) }), r } function o(n) { var i = "", r, t; if (typeof n == "string") i = n; else { r = encodeURIComponent; for (t in n) n.hasOwnProperty(t) && (i += "&" + r(t) + "=" + r(n[t])) } return i } function s() { var n; if (window.XMLHttpRequest) n = new XMLHttpRequest; else if (window.ActiveXObject) try { n = new ActiveXObject("Msxml2.XMLHTTP") } catch (t) { n = new ActiveXObject("Microsoft.XMLHTTP") } return n } function f(n, r, u, f) { function y() { e.abort(); h.done(i.ETIMEOUT, "", e) } var h = new t, e, c, l, a, v; u = u || {}; f = f || {}; try { e = s() } catch (p) { return h.done(i.ENOXHR, ""), h } c = o(u); n === "GET" && c && (r += "?" + c, c = null); e.open(n, r); f.hasOwnProperty("Content-type") || e.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); for (l in f) f.hasOwnProperty(l) && e.setRequestHeader(l, f[l]); return a = i.ajaxTimeout, a && (v = setTimeout(y, a)), e.onreadystatechange = function () { if (a && clearTimeout(v), e.readyState === 4) { var n = !e.status || (e.status < 200 || e.status >= 300) && e.status !== 304; h.done(n, e.responseText, e) } }, e.send(c), h } function r(n) { return function (t, i, r) { return f(n, t, i, r) } } t.prototype.then = function (n, i) { var r; return this._isdone ? r = n.apply(i, this.result) : (r = new t, this._callbacks.push(function () { var t = n.apply(i, arguments); t && typeof t.then == "function" && t.then(r.done, r) })), r }; t.prototype.done = function () { this.result = arguments; this._isdone = !0; for (var n = 0; n < this._callbacks.length; n++) this._callbacks[n].apply(null, arguments); this._callbacks = [] }; var i = { Promise: t, join: e, chain: u, ajax: f, get: r("GET"), post: r("POST"), put: r("PUT"), del: r("DELETE"), ENOXHR: 1, ETIMEOUT: 2, ajaxTimeout: 0 }; typeof define == "function" && define.amd ? define(function () { return i }) : n.promise = i })(this);